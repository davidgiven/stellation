apply plugin: 'kotlin-platform-js'
apply plugin: 'com.craigburke.karma'

sourceCompatibility = 1.8

compileKotlin2Js {
    kotlinOptions.metaInfo = false
    kotlinOptions.sourceMap = true
    kotlinOptions.sourceMapEmbedSources = "always"
    kotlinOptions.moduleKind = 'plain'
}

dependencies {
    compile "org.jetbrains.kotlinx:kotlinx-html-js:0.6.11"
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    expectedBy project(":shared")

    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
}

sourceSets {
    main.kotlin.srcDirs += 'src'
    test.kotlin.srcDirs += 'tests'
}

def libDir = "$buildDir/lib"
def compileOutput = compileKotlin2Js.outputFile
def testOutput = compileTestKotlin2Js.outputFile

task populateTestNodeModules(type: Copy, dependsOn: compileTestKotlin2Js) {
//    configurations.testCompile.each {
//        from zipTree(it.absolutePath).matching { include '*.js' }
//    }

    into "$libDir/test"
}

task populateProdNodeModules(type: Copy) {
//    configurations.runtime.each {
//        from zipTree(it.absolutePath).matching { println(it); include '*.js' }
//    }
//
//    into "$libDir/prod"
    configurations.runtime.each {}
}

karma {
    dependencies(['mocha'])

    frameworks = ['mocha']
    browsers = ['PhantomJS']

    files = [
            "$libDir/test/kotlin.js",
            "$libDir/test/*.js",
            "$compileOutput",
            "$testOutput",
    ]
}

karmaRun {
    dependsOn compileTestKotlin2Js
    dependsOn populateTestNodeModules
}

test.dependsOn karmaRun
clean.dependsOn karmaClean

task combineModules(type: Exec, dependsOn: populateProdNodeModules) {
    outputs.dir "$buildDir/js"
    inputs.files(["$libDir/prod/kotlin.js",
                  "$libDir/prod/kotlinx-html-js.js",
                  "$compileOutput"])
    commandLine "uglifyjs",
            "$libDir/prod/kotlin.js",
            "$libDir/prod/kotlinx-html-js.js",
            "$compileOutput",
            "--output=build/js/stellation.js",
            "--source-map=build/js/stellation.js.map",
            "--compress", "warnings=false",
            "--beautify"
}

task compileScss(type: Exec) {
    inputs.files "resources/style.scss"
    outputs.dir "$buildDir/sass"
    commandLine "sassc",
            "--style=nested",
            "resources/style.scss",
            "$buildDir/sass/style.css"
}

task createOutputPackage(type: Copy,
        dependsOn: [combineModules, compileScss]) {
    from("resources") {
        exclude "**/*.scss"
    }
    from "$buildDir/js"
    from "$buildDir/sass"
    into "$buildDir/outputPackage"
}

assemble.dependsOn createOutputPackage
